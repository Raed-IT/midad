<?php

namespace App\Filament\Resources;

use App\Filament\Resources\TaskResource\Pages;
use App\Filament\Resources\TaskResource\RelationManagers;
use App\Filament\Resources\TaskResource\RelationManagers\AnswerRelationManager;
use App\Models\Lang;
use App\Models\Study;
use App\Models\Task;
use Faker\Provider\Text;
use Filament\Forms;
use Filament\Forms\Components\Tabs;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\SoftDeletingScope;

class TaskResource extends Resource
{
    protected static ?string $model = Task::class;

    protected static ?string $navigationIcon = 'heroicon-o-rectangle-stack';

    public static function getLabel(): ?string
    {
        return __('headers.task'); // TODO: Change the autogenerated stub
    }

    public static function getModelLabel(): string
    {
        return __('headers.task'); // TODO: Change the autogenerated stub
    }

    public static function getPluralLabel(): ?string
    {
        return __('headers.tasks'); // TODO: Change the autogenerated stub
    }

    public static function getPluralModelLabel(): string
    {
        return __('headers.tasks'); // TODO: Change the autogenerated stub
    }
    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\Card::make()->schema([
                    Tabs::make('Label')
                        ->tabs(
                            function () {
                                $items = [];
                                foreach (Lang::whereIsActive(true)->get() as $lang) {
                                    array_push($items,
                                        Tabs\Tab::make($lang->name)
                                            ->schema([
                                                Forms\Components\TextInput::make("info." . $lang->code)->required()->label(__("words.description"))
                                            ]),
                                    );
                                }
                                return $items;
                            }
                        ),
                    Forms\Components\Select::make("study_id")
                        ->relationship("study", "title")->label(__('headers.study'))
                        ->getOptionLabelFromRecordUsing(fn(Study $record) => "$record->title"),

                    Forms\Components\SpatieMediaLibraryFileUpload::make("files")->multiple()->maxFiles(3)
                        ->label(__('words.files'))
                ])
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\TextColumn::make("info")->label(__('words.description'))->searchable(),

                Tables\Columns\TextColumn::make("answers_count")
                    ->counts("answers")->badge()->color("success")->label(__('headers.answers'))
            ])
            ->filters([
                //
            ])
            ->actions([
                Tables\Actions\EditAction::make(),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ])
            ->emptyStateActions([
                Tables\Actions\CreateAction::make(),
            ]);
    }

    public static function getRelations(): array
    {
        return [
            AnswerRelationManager::class,
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListTasks::route('/'),
            'create' => Pages\CreateTask::route('/create'),
            'edit' => Pages\EditTask::route('/{record}/edit'),
        ];
    }
}
