<?php

namespace App\Filament\Resources;

use App\Enums\GenderEnum;
use App\Enums\UserTypeEnum;
use App\Filament\Resources\UserResource\Pages;
use App\Filament\Resources\UserResource\RelationManagers\CoursesRelationManager;
use App\Filament\Resources\UserResource\RelationManagers\TasksRelationManager;
use App\Models\User;
 use Filament\Forms;
use Filament\Forms\Components\Select;
use Filament\Forms\Components\SpatieMediaLibraryFileUpload;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use Spatie\Permission\Models\Role;

class UserResource extends Resource
{
    protected static ?string $model = User::class;

    protected static ?string $navigationIcon = 'heroicon-o-rectangle-stack';

    protected static bool $shouldRegisterNavigation = false;

    public static function getLabel(): ?string
    {
        return __('headers.user'); // TODO: Change the autogenerated stub
    }

    public static function getModelLabel(): string
    {
        return __('headers.user'); // TODO: Change the autogenerated stub
    }

    public static function getPluralLabel(): ?string
    {
        return __('headers.users'); // TODO: Change the autogenerated stub
    }

    public static function getPluralModelLabel(): string
    {
        return __('headers.users'); // TODO: Change the autogenerated stub
    }

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\Section::make(__("headers.users"))->schema([
                    SpatieMediaLibraryFileUpload::make('image')->collection('image')->label(__("words.profile_image")),
                    Forms\Components\TextInput::make('name')->required()->label(__("words.name"))->required(),
                    Forms\Components\TextInput::make('phone')->label(__("words.phone"))->numeric(),
                    Forms\Components\TextInput::make('email')->required()->email()->unique(ignoreRecord: true)->label(__('words.email')),
                    Forms\Components\Card::make()->schema([
                        Forms\Components\TextInput::make('password')->required(fn($context) => $context == "create")
                            ->password(fn($get) => !$get('show_password'))
                            ->same('passwordConfirmation')->dehydrated(fn($state) => filled($state))
                            ->label(__("words.password"))->reactive(),
                        Forms\Components\TextInput::make('passwordConfirmation')->required(fn($context) => $context == "create")
                            ->dehydrated(false)->password(fn($get) => !$get('show_password'))
                            ->label(__('words.password_confirmation')),
                        Forms\Components\Toggle::make("show_password")->label(__('words.show_password'))->reactive()->dehydrated(false),
                    ]),
                    Forms\Components\Textarea::make("address")->label(__('words.address')),
                    Forms\Components\Select::make("gender")->options(function () {
                        $data = [];
                        foreach (GenderEnum::cases() as $item) {
                            $data[$item->value] = $item->name();
                        }
                        return $data;
                    })->label(__('words.gender'))->required(),
                    Select::make('roles')->multiple()
                        ->relationship("roles", "name")
                        ->getOptionLabelFromRecordUsing(fn (Role $record) => UserTypeEnum::tryFrom($record->name)->name())
                        ->preload()->required()->label(__('words.user_type'))
                ])
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\TextColumn::make("id")->label("ID")->sortable(),
                Tables\Columns\TextColumn::make("name")->label(__('words.name'))->searchable(),
                Tables\Columns\TextColumn::make("email")->label(__('words.email'))->searchable(),
         Tables\Columns\TextColumn::make("roles")
                    ->badge()->color(fn($state) => UserTypeEnum::tryFrom($state->name)->color())
                    ->formatStateUsing(fn($state) => UserTypeEnum::tryFrom($state->name)->name())
                    ->label(__('words.user_type'))->searchable(),
                Tables\Columns\TextColumn::make("gender")
                    ->badge()->color(fn($state) => GenderEnum::tryFrom($state)->color())
                    ->formatStateUsing(fn($state) => GenderEnum::tryFrom($state)->name())
                    ->label(__('words.gender'))->searchable(),


            ])
            ->filters([
                //
            ])
            ->actions([
                Tables\Actions\EditAction::make(),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ])
            ->emptyStateActions([
                Tables\Actions\CreateAction::make(),
            ]);
    }

    public static function getRelations(): array
    {
        return [
            CoursesRelationManager::class,
            TasksRelationManager::class
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListUsers::route('/'),
            'create' => Pages\CreateUser::route('/create'),
            'edit' => Pages\EditUser::route('/{record}/edit'),
        ];
    }
}
